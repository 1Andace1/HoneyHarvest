import { useAppSelector } from '../../redux/hooks';
import  { useState, useEffect } from 'react';
import {
  Box,
  Text,
  Heading,
  VStack,
  HStack,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  
  ModalBody,
  ModalCloseButton,
  Input,
  Image,
  Button,
  useDisclosure,
  StackDivider,
} from '@chakra-ui/react';
import axiosInstance from '../../axiosInstance';
import OrderDetailsModal from '../../components/OrderDetailsModal/OrderDetailsModal';
// import { Step, Steps, useSteps } from '@chakra-ui/react';
import dayjs from 'dayjs'; // ^ new = –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –¥–∞—Ç—ã
import 'dayjs/locale/ru'; // ^ new = –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –¥–∞—Ç—ã –ò–º–ø–æ—Ä—Ç —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏ –¥–ª—è dayjs
import localizedFormat from 'dayjs/plugin/localizedFormat'; // ^ new=  –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –¥–∞—Ç—ã

dayjs.extend(localizedFormat); // ^ new = –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –¥–∞—Ç—ã
dayjs.locale('ru'); // ^ new = –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –¥–∞—Ç—ã

const { VITE_API, VITE_BASE_URL }: ImportMeta['env'] = import.meta.env;

function ProfilePage(): JSX.Element {
  // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º useAppSelector
  const { user } = useAppSelector((state) => state.authSlice);
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const [isEditing, setIsEditing] = useState(false);
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const [formData, setFormData] = useState<{
    username: string | undefined;
    email: string | undefined;
    password: string;
    profilePhoto: File | null;
  }>({
    username: user?.username,
    email: user?.email,
    password: '',
    profilePhoto: null,
  });
  interface OrderItem {
    imageUrl: string;
    name: string;
    price: number;
    quantity: number;
  }
  
  interface IOrder {
    id: number;
    date: string;
    status: string;
    estimatedDate: string;
    totalBasketPrice: number;
    deliveryAddress: string;
    comment: string;
    items: OrderItem[];
    createdAt: string; 
    updatedAt: string;
  }
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
   const [error, setError] = useState<any | null>(null);
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [orders, setOrders] = useState<IOrder[]>([]); // ^ new —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  // useDisclosure –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–∞–∫—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const { isOpen, onOpen, onClose } = useDisclosure(); // ^ new
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const [selectedOrder, setSelectedOrder] = useState<IOrder | null>(null); // ^ new
  // useDisclosure –¥–ª—è –º–æ–¥–µ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
  console.log(error)
  const {
    isOpen: isDetailsOpen,
    // ? onOpen: onDetailsOpen,
    onClose: onDetailsClose,
  } = useDisclosure(); // ^ new
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
   const [orderDetails, setOrderDetails] = useState<any[]>([]); // ^ new
  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      // e—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setFormData({ ...formData, profilePhoto: e.target.files[0] });
    } else {
      // –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setFormData({ ...formData, [e.target.name]: e.target.value });
    }
  };

  // –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∞–π–ª–∞
  const handleSubmit = async (e:React.FormEvent<HTMLFormElement>) =>  {
    e.preventDefault();
    try {
      // –æ–±—ä–µ–∫—Ç FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const formDataObj = new FormData();
      if (formData.username !== undefined) {
        formDataObj.append('username', formData.username);
      }
      if (formData.email !== undefined) {
      formDataObj.append('email', formData.email);
      }
      if (formData.password) {
        formDataObj.append('password', formData.password);
      }
      if (formData.profilePhoto) {
        formDataObj.append('profilePhoto', formData.profilePhoto);
      }
      // –æ—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      await axiosInstance.put(
        
        `${import.meta.env.VITE_API}/profile/users/${user.id}`,
        formDataObj,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
            'Content-Type': 'multipart/form-data',
          },
        }
      );
      // ^ new –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
      setIsEditing(false);
      onClose();
    }  catch (error) {
     
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
      setError(error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    }
  };

  // ^ new  useEffect –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        // –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await axiosInstance.get(
          `${import.meta.env.VITE_API}/profile/orders/${user.id}`
        );
        setOrders(response.data);
      } catch (error) {
        setError(error);
      }
    };
    fetchOrders();
  }, [user.id]);

  // const handleViewDetails = (order) => {
  //   setSelectedOrder(order);
  //   onDetailsOpen();
  // };
  const handleViewDetails = async (order: IOrder) => {
    setSelectedOrder(order);
    try {
      const response = await axiosInstance.get(
        `${VITE_BASE_URL}${VITE_API}/profile/order-details/${order.id}`
      );
      console.log(orderDetails)
      setOrderDetails(response.data);
    } catch (error) {
      setError(error);
    }
  };

  const formatDateTime = (datetime: string) => {
    return dayjs(datetime).format('D MMMM (dddd) –≤ HH:mm');
  };

  return (
    <Box
      py={10}
      px={6}
      bg="RGBA(0, 0, 0, 0.24)"
      minHeight="100vh"
      display="flex"
      flexDirection="column"
      alignItems="center"
    >
      <Heading mb={6} color="#1e1f23">
        –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      </Heading>

      <HStack spacing={6} w="full" align="flex-start" mb={8}>
        {/* üü™ –ë–õ–û–ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –ó–ê–ö–ê–ó–ê –ò –ï–ì–û –°–¢–ê–¢–£–°–ê */}
        {orders.length > 0 && (
          <Box
            bg="RGBA(0, 0, 0, 0.36)"
            color="#f8f9fb"
            p={6}
            borderRadius="md"
            w="full"
            maxW="md"
            boxShadow="md"
            textAlign="left"
          >
            <Text fontSize="xl" fontWeight="bold" mb={4}>
              –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
            </Text>
            <VStack
              spacing={4}
              divider={<StackDivider borderColor="gray.200" />}
              align="flex-start"
            >
              <Text>
                –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: <span>{formatDateTime(orders[0].date)}</span>
              </Text>
              <Text>
                –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: <span>{orders[0].status}</span>
              </Text>
              <Text>
                –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
                <span>{formatDateTime(orders[0].estimatedDate)}</span>
              </Text>
              <Text>
                –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <span>{orders[0].totalBasketPrice} —Ä—É–±.</span>
              </Text>
              <Text>
                –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <span>{orders[0].deliveryAddress}</span>
              </Text>
              <Text>
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <span>{orders[0].comment}</span>
              </Text>
            </VStack>
          </Box>
        )}

        {/* üü™ –ë–õ–û–ö –ü–†–û–§–ò–õ–Ø  */}
        <Box
          bg="RGBA(0, 0, 0, 0.24)"
          color="#f8f9fb"
          p={6}
          borderRadius="md"
          w="full"
          maxW="md"
          boxShadow="md"
          // textAlign="left"
          textAlign="center"
        >
          <Image
            src={user.profilePhoto || '/uploads/no-photo.jpg'}
            alt="Profile Photo"
            boxSize="150px"
            borderRadius="full"
            mx="auto"
            mb={4}
          />
          <Text fontSize="lg" fontWeight="bold">
            –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}
          </Text>
          <Text fontSize="lg" fontWeight="bold">
            Email: {user.email}
          </Text>
          <Button
            colorScheme="blue"
            mt={4}
            bg="#2F855A"
            _hover={{ bg: 'teal.700' }}
            _active={{ bg: 'teal.800' }}
            _focus={{ boxShadow: 'none' }}
            onClick={() => {
              setIsEditing(true);
              onOpen();
            }}
          >
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
          </Button>
        </Box>
      </HStack>

      {/* üü™ –ë–õ–û–ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –∑–∞–∫–∞–∑–∞ –∏–∑ –ò—Å—Ç–æ—Ä–∏–∏ –ó–∞–∫–∞–∑–æ–≤ */}
      {/* {selectedOrder && (
          <Box
            bg="RGBA(0, 0, 0, 0.36)"
            color="#f8f9fb"
            p={6}
            borderRadius="md"
            w="full"
            maxW="md"
            boxShadow="md"
            textAlign="left"
          >
            <Text fontSize="xl" fontWeight="bold" mb={4}>
              –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
            </Text>
            <VStack
              spacing={4}
              divider={<StackDivider borderColor="gray.200" />}
              align="flex-start"
            >
              <Text>
                –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: <span>{selectedOrder.date}</span>
              </Text>
              <Text>
                –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: <span>{selectedOrder.status}</span>
              </Text>
              <Text>
                –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
                <span>{selectedOrder.estimatedDate}</span>
              </Text>
              <Text>
                –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:{' '}
                <span>{selectedOrder.totalBasketPrice} —Ä—É–±.</span>
              </Text>
              <Text>
                –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <span>{selectedOrder.deliveryAddress}</span>
              </Text>
              <Text>
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <span>{selectedOrder.comment}</span>
              </Text>
            </VStack>
            <VStack spacing={4} mt={4} align="flex-start">
              {orderDetails.map((item) => (
                <HStack key={item.id} w="full" justify="space-between">
                  <Image
                    src={item.product.picture || '/uploads/no-photo.jpg'}
                    alt={item.product.title}
                    boxSize="50px"
                  />
                  <Text>{item.product.title}</Text>
                  <Text>{item.quantity} —à—Ç.</Text>
                  <Text>{item.currentPrice} —Ä—É–±.</Text>
                </HStack>
              ))}
            </VStack>
          </Box>
        )} */}

      {/*  üü™ –ë–õ–û–ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –ó–ê–ö–ê–ó–ê */}
      {selectedOrder && (
        <OrderDetailsModal
          isOpen={isDetailsOpen}
          onClose={onDetailsClose}
          order={selectedOrder}
        />
      )}

      {/*  üü™ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–§–ò–õ–Ø */}
      {isEditing && (
        <Modal isOpen={isOpen} onClose={onClose}>
          <ModalOverlay />
          <ModalContent>
            <ModalHeader>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <form onSubmit={handleSubmit}>
                <Input
                  name="username"
                  value={formData.username}
                  onChange={handleChange}
                  placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  mb={3}
                />
                <Input
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="–≠–ª.–ø–æ—á—Ç–∞"
                  mb={3}
                />
                <Input
                  type="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  mb={3}
                />
                <Input
                  type="file"
                  name="profilePhoto"
                  accept="image/*"
                  onChange={handleChange}
                  mb={3}
                />
                <Button type="submit" colorScheme="blue">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </form>
            </ModalBody>
          </ModalContent>
        </Modal>
      )}

      {/*  üü™–ë–õ–û–ö –ò–°–¢–û–†–ò–ò –í–°–ï–• –ó–ê–ö–ê–ó–û–í */}
      <Heading mt={10} mb={6} color="#1e1f23">
        –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
      </Heading>
      {/* <VStack spacing={6} align="start" w="70%"> */}
      <VStack spacing={6} align="start" w="full">
        {orders.map((order) => (
          <Box
            key={order.id}
            w="full"
            p={6}
            borderWidth="1px"
            borderRadius="md"
            bg="RGBA(0, 0, 0, 0.36)"
            color="#f8f9fb"
            display="flex"
            justifyContent="space-between"
            alignItems="center"
          >
            {/* <Text fontWeight="bold" textAlign="left">
              –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:{' '}
              <Text as="span" fontWeight="normal">
                {order.date}
              </Text>
            </Text> */}
            <Box>
              <Text fontWeight="bold">
                –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:{' '}
                <Text as="span" fontWeight="normal">
                  {formatDateTime(order.date)}
                </Text>
              </Text>

              <Text fontWeight="bold" textAlign="left">
                –°—Ç–∞—Ç—É—Å:{' '}
                <Text as="span" fontWeight="normal">
                  {order.status}
                </Text>
              </Text>
              <Text fontWeight="bold" textAlign="left">
                –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
                <Text as="span" fontWeight="normal">
                  {order.estimatedDate}
                </Text>
              </Text>
              <Text fontWeight="bold" textAlign="left">
                –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:{' '}
                <Text as="span" fontWeight="normal">
                  {order.totalBasketPrice} —Ä—É–±.
                </Text>
              </Text>
              <Text fontWeight="bold" textAlign="left">
                –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
                <Text as="span" fontWeight="normal">
                  {order.deliveryAddress}
                </Text>
              </Text>
              <Text fontWeight="bold" textAlign="left">
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{' '}
                <Text as="span" fontWeight="normal">
                  {order.comment}
                </Text>
              </Text>
            </Box>
            <Button
              colorScheme="blue"
              onClick={() => handleViewDetails(order)}
              bg="#2F855A"
              _hover={{ bg: 'teal.700' }}
              _active={{ bg: 'teal.800' }}
              _focus={{ boxShadow: 'none' }}
            >
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
            </Button>
          </Box>
        ))}
      </VStack>
    </Box>
  );
}

export default ProfilePage;

// !--------------
//     <Box
//       py={10}
//       px={6}
//       bg="RGBA(0, 0, 0, 0.24)" // –ë–µ–ª—ã–π —Ñ–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//       minHeight="100vh"
//       display="flex"
//       flexDirection="column"
//       alignItems="center"
//     >
//       <Heading mb={6} color="#1e1f23">
//         –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       </Heading>

//       <HStack spacing={6} w="full" align="flex-start" mb={8}>
//         {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ */}
//         {orders.length > 0 && (
//           <Box
//             bg="RGBA(0, 0, 0, 0.36)"
//             color="#f8f9fb"
//             p={6}
//             borderRadius="md"
//             w="full"
//             maxW="md"
//             boxShadow="md"
//             textAlign="left"
//           >
//             <Text fontSize="xl" fontWeight="bold" mb={4}>
//               –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
//             </Text>
//             <VStack
//               spacing={4}
//               divider={<StackDivider borderColor="gray.200" />}
//               align="flex-start"
//             >
//               <Text>
//                 –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: <span>{orders[0].date}</span>
//               </Text>
//               <Text>
//                 –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: <span>{orders[0].status}</span>
//               </Text>
//               <Text>
//                 –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
//                 <span>{orders[0].estimatedDate}</span>
//               </Text>
//               <Text>
//                 –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <span>{orders[0].totalBasketPrice} —Ä—É–±.</span>
//               </Text>
//               <Text>
//                 –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: <span>{orders[0].deliveryAddress}</span>
//               </Text>
//               <Text>
//                 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <span>{orders[0].comment}</span>
//               </Text>
//             </VStack>
//             {/* <Steps mt={4} colorScheme="teal" activeStep={0}>
//           <Step label="–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω" />
//           <Step label="–ó–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è" />
//           <Step label="–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" />
//           <Step label="–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω" />
//         </Steps> */}
//           </Box>
//         )}
//         <Box
//           bg="RGBA(0, 0, 0, 0.24)"
//           color="#f8f9fb"
//           p={6}
//           borderRadius="md"
//           w="full"
//           maxW="md"
//           boxShadow="md"
//           textAlign="center"
//         >
//           <Image
//             src={user.profilePhoto || '/uploads/no-photo.jpg'}
//             alt="Profile Photo"
//             boxSize="150px"
//             borderRadius="full"
//             mx="auto"
//             mb={4}
//           />
//           <Text fontSize="lg" fontWeight="bold">
//             –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}
//           </Text>
//           <Text fontSize="lg" fontWeight="bold">
//             Email: {user.email}
//           </Text>
//           <Button
//             colorScheme="blue"
//             mt={4}
//             bg="#2F855A"
//             _hover={{ bg: 'teal.700' }}
//             _active={{ bg: 'teal.800' }}
//             _focus={{ boxShadow: 'none' }}
//             onClick={() => {
//               setIsEditing(true);
//               onOpen();
//             }}
//           >
//             –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
//           </Button>
//         </Box>
//       </HStack>

//       <Heading mt={10} mb={6} color="#1e1f23">
//         –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
//       </Heading>
//       <VStack spacing={6} align="start" w="70%">
//         {orders.map((order) => (
//           <Box
//             key={order.id}
//             w="full"
//             p={6}
//             borderWidth="1px"
//             borderRadius="md"
//             // bg="#2d3748"
//             bg="RGBA(0, 0, 0, 0.36)"
//             color="#f8f9fb"
//           >
//             <Text fontWeight="bold" textAlign="left">
//               –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.date}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –°—Ç–∞—Ç—É—Å:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.status}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.estimatedDate}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.totalBasketPrice} —Ä—É–±.
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.deliveryAddress}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.comment}
//               </Text>
//             </Text>
//             <Button mt={2} onClick={() => handleViewDetails(order)}>
//               –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
//             </Button>
//           </Box>
//         ))}
//       </VStack>

//       {selectedOrder && (
//         <OrderDetailsModal
//           isOpen={isDetailsOpen}
//           onClose={onDetailsClose}
//           order={selectedOrder}
//         />
//       )}

//       {isEditing && (
//         <Modal isOpen={isOpen} onClose={onClose}>
//           <ModalOverlay />
//           <ModalContent>
//             <ModalHeader>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</ModalHeader>
//             <ModalCloseButton />
//             <ModalBody>
//               <form onSubmit={handleSubmit}>
//                 <Input
//                   name="username"
//                   value={formData.username}
//                   onChange={handleChange}
//                   placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
//                   mb={3}
//                 />
//                 <Input
//                   name="email"
//                   value={formData.email}
//                   onChange={handleChange}
//                   placeholder="–≠–ª.–ø–æ—á—Ç–∞"
//                   mb={3}
//                 />
//                 <Input
//                   type="password"
//                   name="password"
//                   value={formData.password}
//                   onChange={handleChange}
//                   placeholder="–ü–∞—Ä–æ–ª—å"
//                   mb={3}
//                 />
//                 <Input
//                   type="file"
//                   name="profilePhoto"
//                   accept="image/*"
//                   onChange={handleChange}
//                   mb={3}
//                 />
//                 <Button type="submit" colorScheme="blue">
//                   –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
//                 </Button>
//               </form>
//             </ModalBody>
//           </ModalContent>
//         </Modal>
//       )}
//     </Box>
//   );
// }

// export default ProfilePage;

// !---------------------

//   return (
//     <Box
//       py={10}
//       px={6}
//       bg="RGBA(0, 0, 0, 0.16)"
//       minHeight="100vh"
//       display="flex"
//       flexDirection="column"
//       alignItems="center"
//     >
//       <Heading mb={6} color="#1e1f23">
//         –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//       </Heading>

//       <VStack spacing={6} mb={8} w="full"  align="flex-start" >
//         <Box
//           bg="#2d3748"
//           color="#f8f9fb"
//           p={6}
//           borderRadius="md"
//           w="full"
//           maxW="md"
//           boxShadow="md"
//           textAlign="center"
//         >
//           <Image
//             src={user.profilePhoto || '/uploads/no-photo.jpg'}
//             alt="Profile Photo"
//             boxSize="150px"
//             borderRadius="full"
//             mx="auto"
//             mb={4}
//           />
//           <Text fontSize="lg" fontWeight="bold">
//             –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}
//           </Text>
//           <Text fontSize="lg" fontWeight="bold">
//             Email: {user.email}
//           </Text>
//           <Button
//             colorScheme="blue"
//             mt={4}
//             bg="#2F855A"
//             _hover={{ bg: 'teal.700' }}
//             _active={{ bg: 'teal.800' }}
//             _focus={{ boxShadow: 'none' }}
//             onClick={() => {
//               setIsEditing(true);
//               onOpen();
//             }}
//           >
//             –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
//           </Button>
//         </Box>

//         {isEditing && (
//           <Modal isOpen={isOpen} onClose={onClose}>
//             <ModalOverlay />
//             <ModalContent>
//               <ModalHeader>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</ModalHeader>
//               <ModalCloseButton />
//               <ModalBody>
//                 <form onSubmit={handleSubmit}>
//                   <Input
//                     name="username"
//                     value={formData.username}
//                     onChange={handleChange}
//                     placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
//                     mb={3}
//                   />
//                   <Input
//                     name="email"
//                     value={formData.email}
//                     onChange={handleChange}
//                     placeholder="–≠–ª.–ø–æ—á—Ç–∞"
//                     mb={3}
//                   />
//                   <Input
//                     type="password"
//                     name="password"
//                     value={formData.password}
//                     onChange={handleChange}
//                     placeholder="–ü–∞—Ä–æ–ª—å"
//                     mb={3}
//                   />
//                   <Input
//                     type="file"
//                     name="profilePhoto"
//                     accept="image/*"
//                     onChange={handleChange}
//                     mb={3}
//                   />
//                   <Button type="submit" colorScheme="blue">
//                     –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
//                   </Button>
//                 </form>
//               </ModalBody>
//             </ModalContent>
//           </Modal>
//         )}
//       </VStack>

//       <Heading mt={10} mb={6} color="#f8f9fb">
//         –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
//       </Heading>
//       <VStack spacing={6} align="start" w="70%">
//         {orders.map((order) => (
//           <Box
//             key={order.id}
//             w="full"
//             p={6}
//             borderWidth="1px"
//             borderRadius="md"
//             bg="#2d3748"
//             color="#f8f9fb"
//           >
//             <Text fontWeight="bold" textAlign="left">
//               –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.date}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –°—Ç–∞—Ç—É—Å:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.status}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.estimatedDate}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.totalBasketPrice} —Ä—É–±.
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.deliveryAddress}
//               </Text>
//             </Text>
//             <Text fontWeight="bold" textAlign="left">
//               –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{' '}
//               <Text as="span" fontWeight="normal">
//                 {order.comment}
//               </Text>
//             </Text>
//             <Button mt={2} onClick={() => handleViewDetails(order)}>
//               –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
//             </Button>
//           </Box>
//         ))}
//       </VStack>

//       {selectedOrder && (
//         <OrderDetailsModal
//           isOpen={isDetailsOpen}
//           onClose={onDetailsClose}
//           order={selectedOrder}
//         />
//       )}
//     </Box>
//   );
// }

// export default ProfilePage;
