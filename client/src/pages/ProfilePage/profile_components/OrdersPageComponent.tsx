// & üü¢ OrdersPage: —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
// & –º–µ–∂–¥—É OrderDetails –∏ OrderHistory.

import React, { useState, useEffect } from 'react';
import { Box, Text } from '@chakra-ui/react';
import axiosInstance from '../../../axiosInstance';
import OrderDetails from './OrderDetails';
import OrderHistory from './OrderHistory';
import ConsumptionStats from './ConsumptionStats';

  // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
  interface Order {
    id: number;
    date: string;
    status: string;
    estimatedDate: string;
    totalBasketPrice: number;
    deliveryAddress: string;
    comment: string;
  }
  
  
  interface User {
    id: number;
  }
  
  interface OrdersPageComponentProps {
    user: User;
    orders: Order[];
  }
 

const { VITE_API, VITE_BASE_URL }: ImportMeta['env'] = import.meta.env;

const OrdersPageComponent : React.FC<OrdersPageComponentProps> = ({ user, orders }) =>  {
  const [ordersState, setOrdersState] = useState<Order[]>([]);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [orderDetails, setOrderDetails] = useState([]);
  // const [stats, setStats] = useState<Stat[]>([]);
  const [stats, setStats] = useState<any[]>([]);


  useEffect(() => {
    console.log('üü†orders from OrdersPage', orders);
  }, [orders]); 
 
  // ! –î–õ–Ø –ê–î–ú–ò–ù–ê —Å—Ç–∞—Ç—Å–∏—Ç–∏—Å–∫–∞
  // useEffect(() => {
  //   if (orders && orders.length > 0) {
  //     setOrdersState(orders);
  //       const statsData = calculateStats(orders);
  //     setStats(statsData);
  //   }
  // }, [orders]);

  useEffect(() => {
    if (orders && orders.length > 0) {
      setOrdersState(orders);
        const statsData = calculateStats(orders);
      setStats(statsData);
    }
  }, [orders]);


  useEffect(() => {
    const fetchOrders = async () => {
      const result = await axiosInstance.get<Order[]>(
        `${import.meta.env.VITE_API}/profile/orders/${user.id}`
      );
      console.log('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èresult.data from fetchOrders', result.data);
       setOrdersState(result.data);
    };

    fetchOrders();
  }, [user.id]);

  console.log('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èordersStates',ordersState);

  const fetchOrderDetails = async (orderId: number) => {
    console.log('üü¢ orderId', orderId);
    // setSelectedOrder(ordersState);
    const result = await axiosInstance.get(
      `${VITE_BASE_URL}${VITE_API}/profile/order-details/${orderId}`
    );
    console.log('üü¢ resultfrom fetchOrderDetails', result);
    setOrderDetails(result.data);
    setSelectedOrder(result.data);
  };

  // !  –î–õ–Ø –ê–î–ú–ò–ù–ê:
  // const calculateStats = (orders: Order[]): any[] => {
  //   // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  //   const exampleStats = [
  //     { name: '–Ø–Ω–≤', orders: 5, totalSpent: 3000 },
  //     { name: '–§–µ–≤', orders: 4, totalSpent: 2500 },
  //     { name: '–ú–∞—Ä', orders: 6, totalSpent: 3200 },
  //     // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  //   ];
  //   return exampleStats;
  // };

  const calculateStats = (orders: Order[]): any[] => {
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userOrders = orders.filter(order => order.userId === user.id);

    // ! –£–ë–†–ê–¢–¨ –ü–û–¢–û–ú –ú–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï
    // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const exampleStats = [
      { name: '–Ø–Ω–≤', orders: 5, totalSpent: 3000 },
      { name: '–§–µ–≤', orders: 4, totalSpent: 2500 },
      { name: '–ú–∞—Ä', orders: 6, totalSpent: 3200 },
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ];
    return exampleStats;
  };


  return (
    <Box p={6}>
      <Text fontSize="2xl" fontWeight="bold" mb={6}>
        –ú–æ–∏ –∑–∞–∫–∞–∑—ã
      </Text>
      <OrderHistory orders={orders} onDetailsOpen={fetchOrderDetails} />
      {selectedOrder && (
        <OrderDetails
          selectedOrder={selectedOrder}
          orderDetails={orderDetails}
        />
      )}
      <Box mt={6}>
        <Text fontSize="xl" fontWeight="bold" mb={4}>
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (–ü–û–ö–ê –ß–¢–û –≠–¢–û –î–õ–Ø –ê–î–ú–ò–ù–ê! –≤—Å–µ –∑–∞–∫–∞–∑—ã)
        </Text>
        <ConsumptionStats stats={stats} />
      </Box>
    </Box>
  );
};

export default OrdersPageComponent;
