// & üü¢ OrdersPage: —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
// & –º–µ–∂–¥—É OrderDetails –∏ OrderHistory.

import React, { useState, useEffect } from 'react';
import {
  Box,
  Text,
  Divider,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Heading,
  Flex,
  Image
} from '@chakra-ui/react';
import axiosInstance from '../../../axiosInstance';
import OrderDetails from './OrderDetails';
import OrderHistory from './OrderHistory';
import ConsumptionStats from './ConsumptionStats';

// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
interface Order {
  id: number;
  UserId: number;
  date: string;
  status: string;
  estimatedDate: string;
  totalBasketPrice: number;
  totalOrderPrice: string;
  comment: string;
  transactions: Transaction[]; // ^ new –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
}

interface Product {
  id: number;
  title: string;
  picture: string;
  category: number;
  sort: number;
  yearOfHarvest: number;
  price: number;
  locationice: string;
  starsRating: number;
  description: number;
}

interface Transaction {
  id: number;
  productId: number;
  product: Product; // ^ new –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
}

interface User {
  id: number;
  userId: number;
}

interface OrdersPageComponentProps {
  user: User;
  orders: Order[];
  userId: number;
}

interface MonthlyStats {
  name: string; // –º–µ—Å—è—Ü
  orders: number; // –∫-–≤–æ –∑–∞–∫–∞–∑–æ–≤
  // totalSpent: number; // –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥
  totalBasketPrice: number; // –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥
}

const { VITE_API, VITE_BASE_URL }: ImportMeta['env'] = import.meta.env;

const OrdersPageComponent: React.FC<OrdersPageComponentProps> = ({
  user,
  orders,
  userId
}) => {
  const [ordersState, setOrdersState] = useState<Order[]>([]);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [orderDetails, setOrderDetails] = useState([]);
  // const [stats, setStats] = useState<any[]>([]);
  const [monthlyStats, setMonthlyStats] = useState<MonthlyStats[]>([]);

  useEffect(() => {
    console.log('üü†orders from OrdersPage', orders);
  }, [orders]);

  // ! –î–õ–Ø –ê–î–ú–ò–ù–ê —Å—Ç–∞—Ç—Å–∏—Ç–∏—Å–∫–∞
  // useEffect(() => {
  //   if (orders && orders.length > 0) {
  //     setOrdersState(orders);
  //       const statsData = calculateStats(orders);
  //     setStats(statsData);
  //   }
  // }, [orders]);

  useEffect(() => {
    if (orders && orders.length > 0) {
      setOrdersState(orders);
      // const statsData = calculateStats(orders);
      // setStats(statsData);
    }
  }, [orders]);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const result = await axiosInstance.get<Order[]>(
          `${VITE_API}/profile/orders/${user.id}`
        );
        // console.log(' üíé result.data from fetchOrders', result.data);
        setOrdersState(result.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      }
    };
    fetchOrders();
  }, [user.id]);

  // console.log(' üíé ordersStates', ordersState);

  const fetchOrderDetails = async (orderId: number) => {
    console.log('üü¢ orderId', orderId);
    const result = await axiosInstance.get(
      `${VITE_BASE_URL}${VITE_API}/profile/order-details/${orderId}`
    );
    // console.log('üíéüíéüíé resultfrom fetchOrderDetails', result.data);
    setOrderDetails(result.data);
    setSelectedOrder(result.data);
  };

  // !  –î–õ–Ø –ê–î–ú–ò–ù–ê:
  // const calculateStats = (orders: Order[]): any[] => {
  //   // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  //   const exampleStats = [
  //     { name: '–Ø–Ω–≤', orders: 5, totalSpent: 3000 },
  //     { name: '–§–µ–≤', orders: 4, totalSpent: 2500 },
  //     { name: '–ú–∞—Ä', orders: 6, totalSpent: 3200 },
  //     // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Å—è—Ü—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  //   ];
  //   return exampleStats;
  // };

  const calculateStats = (orders: Order[], user: User): MonthlyStats[] => {
    // —Ñ–∏–ª—å—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üíé user=', user);
    console.log('üíé user.id=', user.id);
    console.log('üíé orders=', orders);

    const userOrders = orders.filter((order) => {
      console.log('order=================', order);
      console.log(
        'order.totalBasketPrice=================',
        order.totalBasketPrice
      );
      console.log(
        'order.totalBasketPrice=================typeof ',
        typeof order.totalBasketPrice
      );
      // console.log('user.id',user.id);
      return order.UserId === user.id;
    });

    console.log('üíé userOrders=', userOrders);
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthlyStats: MonthlyStats[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ totalSpent, –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–≤–Ω–æ null
    // const totalSpent = user.totalSpent !== null ? user.totalSpent : 0;
    let totalBasketPrice = 0;
    let totalOrderPrice = 0;
    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    userOrders.forEach((order) => {
      const month = new Date(order.date).getMonth(); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (0 - —è–Ω–≤–∞—Ä—å, 11 - –¥–µ–∫–∞–±—Ä—å)
      const monthName = getMonthName(month); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞

      // –ò—â–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ monthlyStats –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      const existingMonth = monthlyStats.find(
        (stat) => stat.name === monthName
      );

      if (existingMonth) {
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –º–µ—Å—è—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        existingMonth.orders++;
        // console.log('üíé typeof  order.totalOrderPrice=', typeof  order.totalOrderPrice);
        existingMonth.totalBasketPrice = order.totalBasketPrice; // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ totalPrice - —ç—Ç–æ –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
        console.log('üíé existingMonth=', existingMonth);
      } else {
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–µ—Å—è—Ü–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        console.log(
          'üíé typeof  order.totalBasketPrice=',
          typeof order.totalBasketPrice
        );
        monthlyStats.push({
          name: monthName,
          orders: 1, // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –∑–∞–∫–∞–∑–∞
          totalBasketPrice: (totalBasketPrice += order.totalBasketPrice), // –ò –æ–±—â–µ–π —Å—É–º–º–æ–π —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        });
      }
    });
    console.log('üíé monthlyStats2=', monthlyStats);
    // –û–±–Ω–æ–≤–ª—è–µ–º totalSpent –≤ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    monthlyStats.forEach((stat) => {
      stat.totalBasketPrice += totalBasketPrice; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });

    return monthlyStats;
  };
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (ordersState.length > 0 && user) {
      const stats = calculateStats(ordersState, user);
      setMonthlyStats(stats);
    }
  }, [ordersState, user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
  const getMonthName = (month: number): string => {
    const months = [
      '–Ø–Ω–≤–∞—Ä—å',
      '–§–µ–≤—Ä–∞–ª—å',
      '–ú–∞—Ä—Ç',
      '–ê–ø—Ä–µ–ª—å',
      '–ú–∞–π',
      '–ò—é–Ω—å',
      '–ò—é–ª—å',
      '–ê–≤–≥—É—Å—Ç',
      '–°–µ–Ω—Ç—è–±—Ä—å',
      '–û–∫—Ç—è–±—Ä—å',
      '–ù–æ—è–±—Ä—å',
      '–î–µ–∫–∞–±—Ä—å',
    ];
    return months[month];
  };

  return (
    <Box p={6}>
      {/* <Flex direction="row" justifyContent="space-between" alignItems="flex-start"></Flex> */}
      <Text fontSize="2xl" fontWeight="bold" mb={6}>
        –ú–æ–∏ –∑–∞–∫–∞–∑—ã
      </Text>
      <OrderHistory orders={ordersState} onDetailsOpen={fetchOrderDetails} userId={user.id} />
      <Box>
        {selectedOrder && (
          <Box mt={6}>
 
            <Box>
              <Flex
                direction="row"
                justifyContent="space-between"
                alignItems="flex-start"
              >
                 <OrderDetails
              selectedOrder={selectedOrder}
              orderDetails={orderDetails}
            />
             
                <Box>
                <Text fontSize="xl" fontWeight="bold" >
                  –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:
                </Text>
                  {selectedOrder.transactions.map((transaction) => (
                    <Box
                      key={transaction.id}
                      borderWidth="1px"
                      borderRadius="lg"
                      p={4}
                      mb={4}
                      display="flex"
                      alignItems="center"
                      flexDirection="row"
                    >
                      
                      <Image
                        src={transaction.product.picture}
                        alt={transaction.product.title}
                        boxSize="3cm"
                        objectFit="cover"
                        marginRight="10px"
                      />
                      <Box>
                        <Text fontSize="md" mb={2} fontWeight="bold">
                          –¶–µ–Ω–∞: {transaction.product.price} —Ä—É–±.
                        </Text>
                        <Flex fontSize="md" mb={2} alignItems="center">
                          <Image
                            src="/icons/star_rating.png"
                            alt={transaction.product.title}
                            boxSize="1cm"
                            objectFit="cover"
                            marginRight="10px"
                          />
                          <Text>
                            –†–µ–π—Ç–∏–Ω–≥: {transaction.product.starsRating}
                          </Text>
                        </Flex>
                      </Box>
                      <br />
                      <br />
                      <hr />
                      <Box flex="1">
                        <Text fontSize="lg" fontWeight="bold" mb={2}>
                          {transaction.product.title}
                        </Text>
                        <Text fontSize="md" mb={2}>
                          {transaction.product.description}
                        </Text>
                      </Box>
                      {/* <Box>
                        <Text fontSize="md" mb={2} fontWeight="bold">
                          –¶–µ–Ω–∞: {transaction.product.price} —Ä—É–±.
                        </Text>
                        <Flex fontSize="md" mb={2} alignItems="center">
                          <Image
                            src="/icons/star_rating.png"
                            alt={transaction.product.title}
                            boxSize="1cm"
                            objectFit="cover"
                            marginRight="10px"
                          />
                          <Text>
                            –†–µ–π—Ç–∏–Ω–≥: {transaction.product.starsRating}
                          </Text>
                        </Flex>
                      </Box> */}
                    </Box>
                  ))}
                </Box>
              </Flex>
            </Box>
          </Box>
        )}
      </Box>

      <Divider mt={6} />

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º */}
      <Box mt="4">
        <Heading mb="4" size="lg">
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        </Heading>
        <Table variant="striped" colorScheme="yellow">
          <Thead>
            <Tr>
              <Th>–ú–µ—Å—è—Ü</Th>
              <Th>–ó–∞–∫–∞–∑–æ–≤</Th>
              <Th>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</Th>
            </Tr>
          </Thead>
          <Tbody>
            {monthlyStats.map((stat) => (
              <Tr key={stat.name}>
                <Td>{stat.name}</Td>
                <Td>{stat.orders}</Td>
                <Td>{stat.totalBasketPrice} —Ä—É–±.</Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      </Box>
    </Box>
  );
};

export default OrdersPageComponent;
