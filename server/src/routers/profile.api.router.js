const router = require('express').Router();
const bcrypt = require('bcrypt');
const { User, Basket, Transaction, Product } = require('../../db/models');
// const { verifyAccessToken } = require("../middlewares/verifyToken");
// ^ –¥–æ–±–∞–≤–ª—è—é –º–∞–ª—Ç–µ—Ä–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–æ–∫ —Ñ–æ—Ç–æ
const upload = require('../middlewares/uploadPhotos');
// const multer = require("multer");
// const storageConfig = multer.diskStorage({
//   destination: (req, file, cb) => {
//     cb(null, "uploads");
//   },
//   filename: (req, file, cb) => {
//     cb(null, `${Date.now()}_${file.originalname}`);
//   },
// });
// const upload = multer({ storage: storageConfig });

// * –†–æ—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// ? –∏–∑ —Ä—É—á–∫–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω verifyAccessToken
router.put('/users/:id', upload.single('profilePhoto'), async (req, res) => {
  const { username, email, password, telephone, userCity } = req.body;
  const profilePhoto = req.file; // –¥–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

  console.log('PROFILE =============req.body', req.body);
  console.log('PROFILE =============username', username);
  console.log('PROFILE =============email', email);
  console.log('PROFILE =============password', password);
  console.log('PROFILE =============profilePhoto', profilePhoto);
  console.log('PROFILE =============telephone', telephone);
  console.log('PROFILE =============userCity', userCity);

  if (!(username && email)) {
    return res
      .status(400)
      .json({ message: '–í–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø–æ—á—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
  }

  try {
    const user = await User.findByPk(req.params.id);
    // let photoPath = 'uploads/no-photo.jpg'; // ^ new

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const updatedData = {
      username,
      email,
      telephone,
      userCity,
    };

    if (password) {
      updatedData.password = await bcrypt.hash(password, 10);
    }

    if (profilePhoto) {
      // user.profilePhoto = `/${profilePhoto.filename}`; // ! –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä—è–º–æ–π –ø—É—Ç—å –ø–∞–ø–∫–∞-—Å—Ç–∞—Ç–∏—á–Ω–∞—è-> –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –≤—Å–µ!
      // await user.save();
      // photoPath = profilePhoto.path; // ^ new
      // photoPath = profilePhoto.originalname;
      // console.log('üüß =============profilePhoto',  profilePhoto);
      // console.log('üüß =============profilePhoto',  photoPath);
      // updatedData.profilePhoto = photoPath
      updatedData.photo = `${profilePhoto.filename}`;
    }

    //! –Ω–∞–¥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —é–∑–µ—Ä–∞ –∏ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å –±—ã–ª–æ save!
    // user.username = updatedData.username;
    // user.password = updatedData.password;
    // user.email = updatedData.email;
    // user.telephone = updatedData.telephone;
    // user.userCity = updatedData.userCity;
    // await user.update(updatedData); // ^ new
    // await user.save(); // ? –±—ã–ª–æ —ç—Ç–æ, –ø–æ–¥—É–º–∞—Ç—å

    // ^ new –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.assign(user, updatedData);
    await user.save();

    const plainUser = user.get();
    delete plainUser.password;
    console.log('plainUser from profile.api.router', plainUser);

    res.json({ user: plainUser, profilePhoto: user.profilePhoto });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return res
      .status(500)
      .json({ message: 'Server Error with updating profile' });
  }
});
// * –†–æ—É—Ç –¥–ª—è –¥–æ–ø—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫–∞–º –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞–º
router.get('/orders/:userId', async (req, res) => {
  try {
    const orders = await Basket.findAll({
      where: { UserId: req.params.userId },
    });
    res.json(orders);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞:
router.get('/profile/order-details/:orderId', async (req, res) => {
  try {
    const orderDetails = await Transaction.findAll({
      where: { basketId: req.params.orderId },
      include: [{ model: Product, attributes: ['title', 'picture'] }],
    });
    res.json(orderDetails);
  } catch (error) {
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞' });
  }
});

// ^ –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/purchase-history/:userId', async (req, res) => {
  try {
    const user = await User.findByPk(req.params.userId, {
      include: {
        model: Basket,
        as: 'baskets',
        include: {
          model: Transaction,
          as: 'transactions',
          where: { status: 2 } // —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        }
      }
    });

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }


    // –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    let totalSpent = 0;
    user.baskets.forEach(basket => {
      basket.transactions.forEach(transaction => {
        totalSpent += transaction.currentPrice;
      });
    });
console.log('=======totalSpent', totalSpent)
console.log('=======user', user)
    res.json({ totalSpent, baskets: user.baskets });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});
router.get('/achievements/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    const ordersCount = await Order.count({ where: { userId } });
    const reviewsCount = await Review.count({ where: { userId } });
    const localProductsPurchased = await BasketItem.count({
      where: {
        userId,
        productId: {
          [Op.in]: [/* IDs of local beekeepers' products */]
        }
      }
    });

    res.json({
      ordersCount,
      reviewsCount,
      localProductsPurchased: localProductsPurchased > 0,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});


module.exports = router;
