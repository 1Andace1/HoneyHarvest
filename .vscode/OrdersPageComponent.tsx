// & üü¢ OrdersPage: —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º
// & –º–µ–∂–¥—É OrderDetails –∏ OrderHistory.

import React, { useState, useEffect } from 'react';
import {
  Box,
  Text,
  Table,
  Tbody,
  Tr,
  Td,
  Heading,
  Flex,
  Image,
  Spacer,
} from '@chakra-ui/react';
import axiosInstance from '../../../axiosInstance';

import dayjs from 'dayjs';
import 'dayjs/locale/ru';
dayjs.locale('ru');

interface Order {
  UserId: number;
  commentUser: string;
  deliveryAddress: string;
  estimatedDate: string;
  createdAt: string;
  status?: string;
  picture: string;
  numberBasket: number;
  totalOrderPrice: number;
  products: Array<{
    productId: number;
    numberBasket: number;
    totalBasketPrice: number;
    category: number;
    title: string;
    description: string;
    location: string;
    price: number;
    sort: number;
    yearOfHarvest: number;
    starsRating: number;
    picture: string;
  }>;
}

interface Product {
  id: number;
  title: string;
  picture: string;
  category: number;
  sort: number;
  yearOfHarvest: number;
  price: number;
  location: string;
  starsRating: number;
  description: string;
}

interface User {
  id: number;
}

interface OrdersPageComponentProps {
  user: User;
  orders: Order[];
}

interface BasketItem {
  UserId: number;
  commentUser: string;
  createdAt: string;
  date: string;
  deliveryAddress: string;
  estimatedDate: string;
  id: number;
  numberBasket: number;
  orderId: number | null;
  productId: number;
  status: string;
  totalBasketPrice: number;
  updatedAt: string;
  product: Product; // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
}



const formatDateTime = (datetime: string): string => {
  return dayjs(datetime).format('D MMMM (dddd) –≤ HH:mm');
};

const { VITE_API, VITE_BASE_URL }: ImportMeta['env'] = import.meta.env;

// ^ new –†–∞—Å—á–µ—Ç –∫–æ–ª-–≤–∞ –∑–≤–µ–∑–¥
const ProductRating: React.FC<{ product: any }> = ({ product }) => {
  const renderStars = () => {
    const stars = [];
    for (let i = 0; i < product.starsRating; i++) {
      stars.push(
        <Image
          key={i}
          src="/icons/star_rating.png"
          alt={`Star ${i + 1}`}
          boxSize="20px"
          objectFit="cover"
          marginRight="2px" // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∑–≤–µ–∑–¥–∞–º–∏, –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
        />
      );
    }
    return stars;
  };

  return (
    <Box display="flex" alignItems="center">
      {renderStars()}
    </Box>
  );
};

const OrdersPageComponent: React.FC<OrdersPageComponentProps> = ({
  user,
  orders,
}) => {
console.log( 'orders', orders)
  // const [ordersState, setOrdersState] = useState<Order[]>([]);// !---
  // const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  // const [orderDetails, setOrderDetails] = useState([]);
  // const [monthlyStats, setMonthlyStats] = useState<MonthlyStats[]>([]);
  const [ordersFromBasket, setOrdersFromBasket] = useState<BasketItem[]>([]);
  const [order, setOrder] = useState<Order | null>(null);

  // useEffect(() => {
  //   console.log('‚ò£Ô∏è orders from OrdersPage', orders);
  // }, [orders]);


  useEffect(() => {
    const fetchBasketData = async () => {
      const response = await axiosInstance.get(
        `${VITE_BASE_URL}${VITE_API}/basket/get`,
        {
          params: { userId: user.id },
        }
      );
      setOrdersFromBasket(response.data.entry);
    };

    fetchBasketData();
  }, []);


  useEffect(() => {
    if (ordersFromBasket.length > 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ –æ–¥–∏–Ω –∑–∞–∫–∞–∑
      const firstItem = ordersFromBasket[0];
      console.log('‚ò£Ô∏è‚ò£Ô∏è‚ò£Ô∏èfirstItem: ', ordersFromBasket[0]);
      console.log('‚ò£Ô∏è‚ò£Ô∏è‚ò£Ô∏è‚ò£Ô∏èfirstItem.product: ', ordersFromBasket[0].product);
      const orderData: Order = {
        UserId: firstItem.UserId,
        commentUser: firstItem.commentUser,
        createdAt: formatDateTime(firstItem.createdAt),
        status: firstItem.status,
        deliveryAddress: firstItem.deliveryAddress,
        estimatedDate: formatDateTime(firstItem.estimatedDate),
        picture: firstItem.product.picture,
        totalOrderPrice: firstItem.totalBasketPrice,
        numberBasket: firstItem.numberBasket,
        products: ordersFromBasket.map((item) => ({
          productId: item.productId,
          numberBasket: item.numberBasket,
          totalBasketPrice: item.totalBasketPrice,
          category: item.product.category,
          title: item.product.title,
          description: item.product.description,
          location: item.product.location,
          price: item.product.price,
          sort: item.product.sort,
          yearOfHarvest: item.product.yearOfHarvest,
          starsRating: item.product.starsRating,
          picture: item.product.picture,
        })),
      };

      setOrder(orderData);
    }
  }, [ordersFromBasket]);


  // useEffect(() => {
  //   const fetchOrders = async () => {
  //     try {
  //       const result = await axiosInstance.get<Order[]>(
  //         `${VITE_BASE_URL}${VITE_API}/profile/orders/${user.id}`
  //       );
  //       // console.log(' üíéüíéüíéüíéüíé result.data from fetchOrders', result.data);
  //       setOrdersState(result.data);
  //     } catch (error) {
  //       console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
  //     }
  //   };
  //   fetchOrders();
  // }, [user.id]);

  // console.log(' üíé ordersStates', ordersState);

  // const fetchOrderDetails = async (orderId: number) => {
  //   console.log('üü¢ orderId', orderId);
  //   const result = await axiosInstance.get(
  //     `${VITE_BASE_URL}${VITE_API}/profile/order-details/${orderId}`
  //   );
  //   // console.log('üíéüíéüíé resultfrom fetchOrderDetails', result.data);
  //   setOrderDetails(result.data);
  //   setSelectedOrder(result.data);
  // };

  // const calculateStats = (orders: Order[], user: User): MonthlyStats[] => {
  //   const userOrders = orders.filter((order) => {
  //     return order.UserId === user.id;
  //   });
  //   console.log('üíé userOrders=', userOrders);

  //   const monthlyStats: MonthlyStats[] = [];
  //   let totalBasketPrice = 0;
  //   // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  //   userOrders.forEach((order) => {
  //     const month = new Date(order.createdAt).getMonth(); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (0 - —è–Ω–≤–∞—Ä—å, 11 - –¥–µ–∫–∞–±—Ä—å)
  //     const monthName = getMonthName(month); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
  //     // –∏—â–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ monthlyStats –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  //     const existingMonth = monthlyStats.find(
  //       (stat) => stat.name === monthName
  //     );

  //     if (existingMonth) {
  //       existingMonth.orders++;
  //       existingMonth.totalBasketPrice += order.products
  //         ? order.products.reduce(
  //             (sum, product) => sum + product.totalBasketPrice,
  //             0
  //           )
  //         : 0;
  //     } else {
  //       monthlyStats.push({
  //         name: monthName,
  //         orders: 1, // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –∑–∞–∫–∞–∑–∞
  //         totalBasketPrice: order.products
  //           ? order.products.reduce(
  //               (sum, product) => sum + product.totalBasketPrice,
  //               0
  //             )
  //           : 0,
  //       });
  //     }
  //   });

  //   return monthlyStats;
  // };

  // –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // useEffect(() => {
  //   if (ordersState.length > 0 && user) {
  //     const stats = calculateStats(ordersState, user);
  //     setMonthlyStats(stats);
  //   }
  // }, [ordersState, user]);

  // –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
  // const getMonthName = (month: number): string => {
  //   const months = [
  //     '–Ø–Ω–≤–∞—Ä—å',
  //     '–§–µ–≤—Ä–∞–ª—å',
  //     '–ú–∞—Ä—Ç',
  //     '–ê–ø—Ä–µ–ª—å',
  //     '–ú–∞–π',
  //     '–ò—é–Ω—å',
  //     '–ò—é–ª—å',
  //     '–ê–≤–≥—É—Å—Ç',
  //     '–°–µ–Ω—Ç—è–±—Ä—å',
  //     '–û–∫—Ç—è–±—Ä—å',
  //     '–ù–æ—è–±—Ä—å',
  //     '–î–µ–∫–∞–±—Ä—å',
  //   ];
  //   return months[month];
  // };

  return (
    <Box p={6}>
      <Text fontSize="2.5rem" fontWeight="bold">
        –ú–æ–∏ –∑–∞–∫–∞–∑—ã
      </Text>
      <div>
        {order ? (
          
          <Box p={4} borderWidth="1px" borderRadius="lg" mb={4}>
                    <Heading fontSize="2rem" h="70px" bg="#9AE6B4">
          –ó–∞–∫–∞–∑ ‚Ññ {order.numberBasket}
              </Heading>
            {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã */}
            <Table variant="simple" mb={4}>
              <Tbody>
                <Tr>
                  <Td fontWeight="bold" fontSize="1.4rem">
                    –°—Ç–∞—Ç—É—Å
                  </Td>
                  <Td fontSize="1.4rem">{order.status}</Td>
                </Tr>{' '}
                <Tr>
                  <Td fontWeight="bold" fontSize="1.4rem">
                    –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:
                  </Td>
                  <Td fontSize="1.4rem">{order.deliveryAddress}</Td>
                </Tr>
                <Tr>
                  <Td fontWeight="bold" fontSize="1.4rem">
                    –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞:
                  </Td>
                  <Td fontSize="1.4rem">{order.estimatedDate}</Td>
                </Tr>
                <Tr>
                  <Td fontWeight="bold" fontSize="1.4rem">
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
                  </Td>
                  <Td fontSize="1.4rem">{order.commentUser}</Td>
                </Tr>
                <Tr>
                  <Td fontWeight="bold" fontSize="1.4rem">
                    –°–æ–∑–¥–∞–Ω–æ:
                  </Td>
                  <Td fontSize="1.4rem">{order.createdAt}</Td>
                </Tr>
                <Tr>
                  <Td fontWeight="bold" fontSize="1.4rem">
                    –ò—Ç–æ–≥–æ:
                  </Td>
                  <Td fontSize="1.4rem">{order.totalOrderPrice} —Ä—É–±. </Td>
                </Tr>
              </Tbody>
            </Table>

            {/* –ë–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–ü—Ä–æ–¥—É–∫—Ç—ã" */}
            <Text fontSize="lg" fontWeight="bold" mb={4}>
              –ü—Ä–æ–¥—É–∫—Ç—ã:
            </Text>

            {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
            {order.products.map((product, index) => (
              <Box
                key={index}
                p={4}
                borderWidth="1px"
                borderRadius="lg"
                mb={4}
                display="flex"
                flexDirection="row"
                alignItems="center"
              >
                <Image
                  src={`http://localhost:3000/productsPhoto/${product.picture}`}
                  alt={product.title}
                  boxSize="150px"
                  objectFit="cover"
                  marginRight="20px"
                />
                <Box textAlign="center">
                  <Text fontSize="1.3rem" fontWeight="bold" mb={2}>
                    {product.title}
                  </Text>
                  <Flex alignItems="center" mb={2}>
                    <Text fontSize="md" color="gray.500">
                      –†–µ–π—Ç–∏–Ω–≥:
                    </Text>
                    <Box display="flex" alignItems="center">
                      {ProductRating({ product })}
                    </Box>
                  </Flex>
                </Box>
                <Box flex="1">
                  <Flex
                    justifyContent="space-between"
                    alignItems="center"
                    mb={2}
                  >
                    <Box>
                      <Text fontSize="1.1rem" color="gray.500">
                        {product.description}
                      </Text>
                    </Box>
                    <Box textAlign="right">
                      <Text fontSize="lg" fontWeight="bold">
                        {/* –¶–µ–Ω–∞0: {product.totalBasketPrice} —Ä—É–±. */}
                        –°—Ç–æ–∏–º–æ—Å—Ç—å: <br />
                        {(product.price * product.numberBasket) / 10} —Ä—É–±.
                      </Text>
                      <Text fontSize="md" color="gray.500">
                        –ö–æ–ª-–≤–æ: {product.numberBasket * 100}–≥.
                      </Text>
                      <Text fontSize="md" color="gray.500">
                        –¶–µ–Ω–∞ –∑–∞ 1 –∫–≥: {product.price} —Ä—É–±.
                      </Text>
                    </Box>
                  </Flex>
                  <Flex alignItems="center">
                    <Text fontSize="md" color="gray.500">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <br />
                      {product.category}
                    </Text>
                    <Spacer />

                    <Text fontSize="md" color="gray.500">
                      –°–æ—Ä—Ç:
                      <br /> {product.sort}
                    </Text>
                    <Spacer />
                    <Text fontSize="md" color="gray.500">
                      –ì–æ–¥ —É—Ä–æ–∂–∞—è:
                      <br /> {product.yearOfHarvest}
                    </Text>
                    <Spacer />
                    <Text fontSize="md" color="gray.500">
                      –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <br />
                      {product.location}
                    </Text>
                  </Flex>
                </Box>
              </Box>
            ))}
          </Box>
        ) : (
          <p>–î–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –Ω–µ –±—ã–ª–æ.</p>
        )}
      </div>
    </Box>
  );
};

export default OrdersPageComponent;
